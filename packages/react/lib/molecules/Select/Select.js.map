{"version":3,"file":"Select.js","sources":["../../../src/molecules/Select/Select.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect, KeyboardEventHandler } from \"react\";\r\nimport Text from \"@/atoms/Text\";\r\n\r\nconst KEY_CODES = {\r\n    ENTER: 13,\r\n    SPACE: 32,\r\n    DOWN_ARROW: 40\r\n}\r\n\r\ninterface SelectOption {\r\n    label: string;\r\n    value: string;\r\n}\r\n\r\ninterface RenderOptionProps {\r\n    isSelected: boolean;\r\n    option: SelectOption;\r\n    getOptionRecommendedProps: (overrideProps?: Object) => Object;\r\n}\r\n\r\ninterface SelectProps {\r\n    onOptionSelected?: (option: SelectOption, optionIndex: number) => void;\r\n    options?: SelectOption[];\r\n    label?: string;\r\n    renderOption?: (props: RenderOptionProps) => React.ReactNode;\r\n}\r\n\r\nconst Select: React.FC<SelectProps> = ({\r\n    options = [],\r\n    label = \"Please select\",\r\n    onOptionSelected: handler,\r\n    renderOption,\r\n}) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const [selectedIndex, setSelectedIndex] = useState<null | number>(null);\r\n    const [overlayTop, setOverlayTop] = useState<number>(0);\r\n    const [optionRefs, setOptionRefs] = useState<React.RefObject<HTMLLIElement>[]>([])\r\n    const labelRef = useRef<HTMLButtonElement>(null);\r\n\r\n    useEffect(() => {\r\n        setOverlayTop((labelRef.current?.offsetHeight || 0) + 10);\r\n    }, [labelRef.current?.offsetHeight]);\r\n\r\n    const onOptionSelected = (option: SelectOption, optionIndex: number) => {\r\n        if (handler) handler(option, optionIndex);\r\n        setSelectedIndex(optionIndex);\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const onLabelClick = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n \r\n    const onButtonKeyDown: KeyboardEventHandler = (event) => {\r\n        event.preventDefault();\r\n        if([KEY_CODES.ENTER, KEY_CODES.SPACE, KEY_CODES.DOWN_ARROW].includes(event.keyCode)){\r\n            setIsOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='dse-select'>\r\n            <button \r\n            role=\"menu\"\r\n            aria-controls=\"dse-select-list\"\r\n                aria-haspopup={true}\r\n                aria-expanded={isOpen?true:undefined}\r\n                ref={labelRef}\r\n                className='dse-select__label'\r\n                onKeyDown={onButtonKeyDown}\r\n                onClick={() => {\r\n                    onLabelClick();\r\n                }}\r\n            >\r\n                <Text>\r\n                    {selectedIndex === null\r\n                        ? label\r\n                        : options[selectedIndex].label}\r\n                </Text>\r\n\r\n                <svg\r\n                    width='1rem'\r\n                    height='1rem'\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    fill='none'\r\n                    viewBox='0 0 24 24'\r\n                    strokeWidth={1.5}\r\n                    stroke='currentColor'\r\n                    className={`dse-select__caret ${\r\n                        isOpen\r\n                            ? \"dse-select__caret--open\"\r\n                            : \"dse-select__caret--closed\"\r\n                    }`}\r\n                >\r\n                    <path\r\n                        strokeLinecap='round'\r\n                        strokeLinejoin='round'\r\n                        d='m4.5 15.75 7.5-7.5 7.5 7.5'\r\n                    />\r\n                </svg>\r\n            </button>\r\n            {isOpen && (\r\n                <ul id=\"dse-select-list\" style={{ top: overlayTop }} className='dse-select__overlay'>\r\n                    {options.map((option, optionIndex) => {\r\n                        const isSelected = optionIndex === selectedIndex;\r\n                        const renderOptionProps = {\r\n                            isSelected,\r\n                            option,\r\n                            getOptionRecommendedProps: (overrideProps = {}) => {\r\n                                return {\r\n                                    className: `dse-select__option ${\r\n                                        isSelected\r\n                                            ? \"dse-select__option--selected\"\r\n                                            : \"\"\r\n                                    }`,\r\n                                    key: option.value,\r\n                                    onClick: ()=> onOptionSelected(option, optionIndex),\r\n                                    ...overrideProps\r\n                                };\r\n                            },\r\n                        };\r\n                        if (renderOption) {\r\n                            return renderOption(renderOptionProps);\r\n                        }\r\n                        return (\r\n                            <li\r\n                                className={`dse-select__option ${\r\n                                    isSelected\r\n                                        ? \"dse-select__option--selected\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => {\r\n                                    onOptionSelected(option, optionIndex);\r\n                                }}\r\n                                key={option.value}\r\n                            >\r\n                                <Text>{option.label}</Text>\r\n                                {isSelected && (\r\n                                    <svg\r\n                                        width='1rem'\r\n                                        height='1rem'\r\n                                        xmlns='http://www.w3.org/2000/svg'\r\n                                        fill='none'\r\n                                        viewBox='0 0 24 24'\r\n                                        strokeWidth={1.5}\r\n                                        stroke='currentColor'\r\n                                        className='w-6 h-6'\r\n                                    >\r\n                                        <path\r\n                                            strokeLinecap='round'\r\n                                            strokeLinejoin='round'\r\n                                            d='m4.5 12.75 6 6 9-13.5'\r\n                                        />\r\n                                    </svg>\r\n                                )}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n"],"names":[],"mappings":"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"}